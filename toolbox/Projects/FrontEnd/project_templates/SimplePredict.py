from typing import List, Optional, Union, Dict

from functools import partial

import requests
import streamlit as st

from toolbox.Structures import Image

from . import BaseTemplate


class SimplePredict(BaseTemplate):

    def __init__(self, **kwargs):
        """Create the SimplePredict Project template.
        """
        super().__init__(**kwargs)

        # Streamlit elements
        self._st_input_image = None
        self._st_input_image_id = None
        self._st_preview_image_id = None
        self._st_output_image = None
        self._st_output_json = None
        self._st_button_predict = None
        self._st_error = None

    def _call_api_predict(
        self,
        image_id: str,
        post_to_broker: Optional[bool] = None
    ) -> List[dict]:
        """Call the predict method of the API.

        Args:
            image_id (str): ID of the image to predict.
            post_to_broker (Optional[bool], optional): Post the generated
                entity to the context broker. None to use the API defaults.
                Defaults to None.

        Raises:
            HTTPError: If the request fails.

        Returns:
            List[dict]: A list of entities generated by the API.
        """
        route = self.get_api_path("predict")
        content = {"entity_id": image_id}
        if post_to_broker is not None:
            content["post_to_broker"] = post_to_broker
        self.logger.info(f"Calling {route} with {content}")
        response = requests.post(route, json=content)
        if not response.ok:
            response.raise_for_status()
        return response.json()

    def _predict_image(self, image_id: str):
        """Call the API to predict the given image and visualize the results.

        Args:
            image_id (str): Input image id.
        """
        try:
            entities = self._call_api_predict(image_id)
            self.components["output_json"].value = entities
            self.components["output_json"].type = "json"
        except Exception as e:
            self.logger.exception(e, exc_info=True)
            self.components["output_json"].value = f"Error: {str(e)}"
            self.components["output_json"].type = "error"
            return

        try:
            image = self._visualize_entities(entities)
            self.components["output_image"].value = image.image
            self.components["output_image"].type = "image"
        except Exception as e:
            self.components["output_image"].value = f"Error: {str(e)}"
            self.components["output_image"].type = "error"

    def _get_image_from_id(self, image_id: str):
        """Get an image from the image storage by its ID and store it on the
        session state. Updates ``input_image``.

        Args:
            image_id (str): ID of the image on the image storage.
        """
        if st.session_state.input_image is not None and \
            st.session_state.input_image.id == image_id:
            return
        try:
            image = self.image_storage_cli.download(image_id)
            image.id = image_id
        except:
            image = None
            st.session_state.error_message = "Error: Image " + \
                image_id.replace(":", "\:") + \
                f" not found on {self.image_storage_cli.url}"
        st.session_state.input_image = image

    def _upload_image(self, st_uploaded_file) -> str:
        """Uploads an image previously uploaded to the Streamlit app to the
        image storage and updates the UI.

        Args:
            st_uploaded_file (streamlit.uploaded_file_manager.UploadedFile): 
                Image uploaded to the Streamlit app.

        Returns:
            str: ID of the image on the image storage.
        """
        try:
            image_id = self.image_storage_cli.upload_bytes(
                image_bytes=st_uploaded_file.read(),
                name=st_uploaded_file.name,
                file_type=st_uploaded_file.type,
                source="toolbox.FrontEnd."+self.name,
            )
        except Exception as e:
            self._st_input_image.error(f"Error: {str(e)}")
        else:
            self._set_input_image(image_id)
            return image_id

    def _visualize_entities(self, entities: List[dict]) -> Image:
        """Visualize a list of entities by its id. Call the image storage API
        to generate the image, then download it and update the UI.

        Args:
            entities (List[dict]): List of entity dicts to visualize.
        """
        entity_ids = [e["id"] for e in entities]
        vis_id = self.image_storage_cli.visualize(entity_ids)
        return self.image_storage_cli.download(vis_id)

    def _init_session_state(self):
        """Initialize the session state variables.
        """
        if "current_input_image_id" not in st.session_state:
            st.session_state.current_input_image_id = None
        if "input_image" not in st.session_state:
            st.session_state.input_image = None
        if "valid_input" not in st.session_state:
            st.session_state.valid_input = False
        if "error_message" not in st.session_state:
            st.session_state.error_message = None

    def _ui(self):
        """Set the UI elements.
        """
        st.title(self.name)
        self._st_error = st.empty()
        col_input, col_output = st.columns(2, gap="large")

        with col_input:
            st.subheader("Input")
            st.text_input(
                "Image ID",
                key="input_image_id",
                disabled=("uploaded_file" in st.session_state and
                    st.session_state.uploaded_file is not None
                )
            )
            st.write(
                "<p style='color: gray; text-align: center;'>- or -</p>",
                unsafe_allow_html=True
            )
            st.file_uploader(
                "Upload an image",
                type=["png", "jpg", "jpeg", "bmp", "tiff"],
                key="uploaded_file",
            )
            st.write("</br>", unsafe_allow_html=True)
            self._st_button_predict = st.empty()
            st.divider()
            self._st_input_image = st.empty()
            self._st_preview_image_id = st.empty()

        with col_output:
            st.subheader("Output")
            self._st_output_json = st.empty()
            st.divider()
            self._st_output_image = st.empty()

    def _update(self):
        """Handle the UI logic.
        """
        button_predict_enabled = False
        image_id_to_send = None

        input_image_id = ""
        if st.session_state.uploaded_file is None:
            # Get the image from the id text input
            input_image_id = st.session_state.input_image_id
        else:
            # Get the image from the uploaded file
            pass

        self._get_image_from_id(input_image_id)

        # Set the input_image an id caption widgets
        if st.session_state.input_image is not None:
            self._st_input_image.image(
                st.session_state.input_image.image,
                channels="BGR"
            )
            self._st_preview_image_id.caption(
                "ID: " + st.session_state.input_image.id.replace(":", "\:")
            )
        else:
            self._st_input_image.empty()
            self._st_preview_image_id.empty()

        # Set the predict button
        self._st_button_predict.button(
            "Predict",
            on_click=self._predict_image,
            disabled=st.session_state.input_image is None
        )

        if st.session_state.error_message is not None:
            self._st_error.error(st.session_state.error_message)
        else:
            self._st_error.empty()
        
        st.session_state.error_message = None

        # Set the input_image_id widget
        # if self._uploaded_file is None:
        #     image_id_input_enabled = True
        # else:
        #     image_id_input_enabled = False
        # input_image_id = self._st_input_image_id.text_input(
        #     "Image ID",
        #     disabled=not image_id_input_enabled
        # )

        # self._set_input_image(input_image_id)

        # Download the image by its ID if no image has been uploaded
        # if self._uploaded_file is None:
        #     if input_image_id and self._set_input_image(input_image_id):
        #         button_predict_enabled = True
        #         image_id_to_send = input_image_id

        #     input_image_id = self._upload_image(self._uploaded_file)
        # else:
        #     button_predict_enabled = False

        # Predict button
        # self._st_button_predict.button(
        #     "Predict",
        #     disabled=not button_predict_enabled,
        #     on_click=partial(self._predict_image, image_id_to_send)
        # )

        # Update the components
        # [c.update() for c in self.components.values()]

        # # Update output JSON
        # if self._predicted_json is not None:
        #     self._st_output_json.json(self._predicted_json)
        # else:
        #     self._st_output_json.empty()

        # # Update output image
        # if self._visualized_image is None:
        #     self._st_output_image.empty()
        # elif isinstance(self._visualized_image, Image):
        #     self._st_output_image.image(
        #         self._visualized_image.image,
        #         channels="BGR"
        #     )
        # elif isinstance(self._visualized_image, str):
        #     self._st_output_image.error(self._visualized_image)

    def __call__(self):
        self._init_session_state()
        self._ui()
        self._update()
