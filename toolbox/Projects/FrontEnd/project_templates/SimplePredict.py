from typing import List, Optional, Union

import requests
import streamlit as st
import json

from toolbox.Structures import Image

from . import BaseTemplate


class SimplePredict(BaseTemplate):
    """Streamlit template for Toolbox Projects which API implements a predict
    method. It allows predicting an image by their ID or by uploading it and
    shows the output JSON and image.
    """

    def __init__(self, **kwargs):
        """Create the SimplePredict Project template.
        """
        super().__init__(**kwargs)

        # Streamlit elements
        self._st_input_image = None
        self._st_input_image_id = None
        self._st_preview_image_id = None
        self._st_output_image = None
        self._st_output_json = None
        self._st_button_predict = None
        self._st_error = None

    def _call_api_predict(
        self,
        image_id: str,
        post_to_broker: Optional[bool] = None,
        accept: str = "application/json"
    ) -> List[dict]:
        """Call the predict method of the API.

        Args:
            image_id (str): ID of the image to predict.
            post_to_broker (Optional[bool], optional): Post the generated
                entity to the context broker. None to use the API defaults.
                Defaults to None.
            accept (str, optional): Accept header. ``application/json`` or
                ``application/ld+json``. Defaults to "application/json".

        Raises:
            HTTPError: If the request fails.

        Returns:
            List[dict]: A list of entities generated by the API.
        """
        route = self.get_api_path("predict")
        content = {"entity_id": image_id}
        if post_to_broker is not None:
            content["post_to_broker"] = post_to_broker
        headers = {"Accept": accept}
        self.logger.info(
            f"Calling {route} with {content} (headers: {headers}))")
        response = requests.post(route, json=content, headers=headers)
        if not response.ok:
            response.raise_for_status()
        return response.json()

    def parse_vis_params(self) -> dict:
        """Parse the visualization parameters from the session state.

        Returns:
            dict: The visualization parameters.
        """
        try:
            return json.loads(st.session_state.visualization_parameters)
        except Exception as e:
            self.logger.exception(e, exc_info=True)
            return {}

    def _on_predict(self):
        """Call the API to predict the given image and visualize the results.
        Store the results on the session state.

        Args:
            image_id (str): Input image id.
        """
        try:
            entities = self._call_api_predict(
                st.session_state.input_image.id,
                accept=st.session_state.accept_header
            )
            st.session_state.output_json = entities
        except Exception as e:
            self.logger.exception(e, exc_info=True)
            st.session_state.error_message = f"Error: {e}"
            return

        if len(entities) == 0:
            return

        try:
            vis_params = self.parse_vis_params()
            image = self._download_visualize_entities(entities, vis_params)
            st.session_state.output_image = image
        except Exception as e:
            self.logger.exception(e, exc_info=True)
            st.session_state.error_message = f"Error: {e}"

    def _get_image_from_id(self, image_id: str) -> Image:
        """Get an image from the image storage by its ID.

        Args:
            image_id (str): ID of the image on the image storage.

        Returns:
            Image: The downloaded image.
        """
        if st.session_state.input_image is not None and \
                st.session_state.input_image.id == image_id:
            return st.session_state.input_image
        try:
            image = self.image_storage_cli.download(image_id)
            image.id = image_id
            return image
        except:
            st.session_state.error_message = "Error: Image " + \
                image_id.replace(":", "\:") + \
                f" not found on {self.image_storage_cli.url}"
            return None

    def upload_input_image(self) -> Union[str, None]:
        """Uploads the input image to the image storage.

        Returns:
            Union[str, None]: The ID of the uploaded image on the image storage
                or None if the upload fails or the image is already uploaded
                to the image storage.
        """
        uploaded_file = st.session_state.uploaded_file
        if st.session_state.uploaded_file_id != uploaded_file.id:
            try:
                image_id = self.image_storage_cli.upload_bytes(
                    image_bytes=uploaded_file.read(),
                    name=uploaded_file.name,
                    file_type=uploaded_file.type,
                    source="toolbox.FrontEnd."+self.name.replace(" ", "_")
                )
                st.session_state.uploaded_file_id = uploaded_file.id
                return image_id
            except Exception as e:
                self.logger.exception(e, exc_info=True)
                st.session_state.error_message = f"Error: {e}"
        return None

    def _download_visualize_entities(self, entities: List[dict],
                                     visualization_params: dict = {}) -> Image:
        """Visualize a list of entities by its id. Call the image storage API
        to generate the image, then download it.

        Args:
            entities (List[dict]): List of entity dicts to visualize.
            visualization_params (dict, optional): Visualization parameters.
                Defaults to {}.

        Returns:
            Image: Image generated by the image storage API.
        """
        entity_ids = [e["id"] for e in entities]
        vis_id = self.image_storage_cli.visualize(
            entity_ids,
            visualization_params=visualization_params)
        return self.image_storage_cli.download(vis_id)

    def _init_session_state(self):
        """Initialize the session state variables.
        """
        if "input_image" not in st.session_state:
            st.session_state.input_image = None
        if "error_message" not in st.session_state:
            st.session_state.error_message = None
        if "output_json" not in st.session_state:
            st.session_state.output_json = None
        if "output_image" not in st.session_state:
            st.session_state.output_image = None
        if "uploaded_file_id" not in st.session_state:
            st.session_state.uploaded_file_id = None

    def _ui(self):
        """Set the UI elements.
        """
        st.title(self.name)
        self._st_error = st.empty()
        col_input, col_output = st.columns(2, gap="large")

        with col_input:
            st.subheader("Input")
            st.text_input(
                "Image ID",
                key="input_image_id",
                disabled=("uploaded_file" in st.session_state and
                          st.session_state.uploaded_file is not None
                          )
            )
            st.write(
                "<p style='color: gray; text-align: center;'>- or -</p>",
                unsafe_allow_html=True
            )
            st.file_uploader(
                "Upload an image",
                type=["png", "jpg", "jpeg", "bmp", "tiff"],
                key="uploaded_file",
            )
            with st.expander("Advanced"):
                st.radio(
                    "Accept",
                    options=["application/json", "application/ld+json"],
                    key="accept_header",
                )
                st.text_area(
                    "Visualization parameters (JSON)",
                    key="visualization_parameters",
                    value="{\n\n}"
                )
            self._st_button_predict = st.empty()
            st.divider()
            self._st_input_image = st.empty()
            self._st_preview_image_id = st.empty()

        with col_output:
            st.subheader("Output")
            self._st_output_image = st.empty()
            st.divider()
            self._st_output_json = st.empty()

    def _update(self):
        """Handle the UI logic.
        """
        # Get the input image ID from the text input or the uploaded file
        input_image_id = ""
        if st.session_state.uploaded_file is None:
            # Get the image from the id text input
            input_image_id = st.session_state.input_image_id
        else:
            # Get the image from the uploaded file
            input_image_id = self.upload_input_image()

        # Download the input image from the image storage
        if input_image_id:
            st.session_state.input_image = self._get_image_from_id(
                input_image_id)

        # Clear image if there is no input
        if st.session_state.input_image is None:
            st.session_state.output_image = None
            st.session_state.output_json = None

        # Set the input_image an id caption widgets
        if st.session_state.input_image is not None:
            self._st_input_image.image(
                st.session_state.input_image.image,
                channels="BGR"
            )
            self._st_preview_image_id.caption(
                "ID: " + st.session_state.input_image.id.replace(":", "\:")
            )
        else:
            self._st_input_image.empty()
            self._st_preview_image_id.empty()

        # Set the predict button
        self._st_button_predict.button(
            "Predict",
            type="primary",
            use_container_width=True,
            on_click=self._on_predict,
            disabled=st.session_state.input_image is None
        )

        # Show the output image if any
        if st.session_state.output_image is not None:
            self._st_output_image.image(
                st.session_state.output_image.image,
                channels="BGR"
            )
        else:
            self._st_output_image.empty()

        # Show the output JSON if any
        if st.session_state.output_json is not None:
            if len(st.session_state.output_json) == 0:
                self._st_output_image.warning("No entities found")
            self._st_output_json.json(st.session_state.output_json)
        else:
            self._st_output_json.empty()

        # Show the error message if any
        if st.session_state.error_message is not None:
            self._st_error.error(st.session_state.error_message)
        else:
            self._st_error.empty()
        st.session_state.error_message = None

    def __call__(self):
        self._init_session_state()
        self._ui()
        self._update()
