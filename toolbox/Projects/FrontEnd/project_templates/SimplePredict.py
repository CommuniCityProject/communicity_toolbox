from typing import List, Optional, Union

import requests
import streamlit as st

from toolbox.Projects.FrontEnd.utils import utils
from toolbox.Structures import Image
from toolbox.utils.utils import urljoin


from . import BaseTemplate


class SimplePredict(BaseTemplate):
    """Streamlit template for Toolbox Projects which API implements a predict
    method. It allows predicting images by their ID or by uploading them and
    shows the output JSON and image.
    """

    def __init__(self, **kwargs):
        """Create the SimplePredict Project template.
        """
        super().__init__(**kwargs)

        # Streamlit elements
        self._st_input_image = None
        self._st_preview_image_id = None
        self._st_output_image = None
        self._st_output_json = None
        self._st_output_text = None
        self._st_button_predict = None
        self._st_error = None

        self._upload_mimes = ["png", "jpg", "jpeg", "bmp", "tiff"]

        self.docs_url = urljoin(self.url, "docs")

    def _call_api_predict(
        self,
        image_id: str,
        post_to_broker: Optional[bool] = None,
        accept: str = "application/json"
    ) -> List[dict]:
        """Call the predict method of the API.

        Args:
            image_id (str): ID of the image to predict.
            post_to_broker (Optional[bool], optional): Post the generated
                entity to the context broker. None to use the API defaults.
                Defaults to None.
            accept (str, optional): Accept header. ``application/json`` or
                ``application/ld+json``. Defaults to "application/json".

        Raises:
            HTTPError: If the request fails.

        Returns:
            List[dict]: A list of entities generated by the API.
        """
        route = self.get_api_path("predict")
        content = {"entity_id": image_id}
        if post_to_broker is not None:
            content["post_to_broker"] = post_to_broker
        headers = {"Accept": accept}
        self.logger.info(
            f"Calling {route} with {content} (headers: {headers}))")
        response = requests.post(route, json=content, headers=headers)
        if not response.ok:
            response.raise_for_status()
        return response.json()

    def _on_predict(self):
        """Call the API to predict the given image and visualize the results.
        Store the results on the session state.

        Args:
            image_id (str): Input image id.
        """
        try:
            entities = self._call_api_predict(
                st.session_state.input_entity_id,
                accept=st.session_state.accept_header
            )
            st.session_state.output_json = entities
        except Exception as e:
            self.logger.exception(e, exc_info=True)
            st.session_state.error_message = f"Error: {e}"
            return

        if len(entities) == 0:
            return

        try:
            image = self._download_visualize_entities(
                entities,
                st.session_state.visualization_parameters
            )
            st.session_state.output_image = image
        except Exception as e:
            self.logger.exception(e, exc_info=True)
            st.session_state.error_message = f"Error: {e}"

    def _get_image_from_id(self, image_id: str) -> Image:
        """Get an image from the image storage by its ID.

        Args:
            image_id (str): ID of the image on the image storage.

        Returns:
            Image: The downloaded image.
        """
        if st.session_state.input_image is not None and \
                st.session_state.input_image.id == image_id:
            return st.session_state.input_image
        try:
            image = self.image_storage_cli.download(image_id)
            return image
        except:
            st.session_state.error_message = "Error: Image " + \
                utils.format_id(image_id) + \
                f" not found on {self.image_storage_cli.url}"
            return None

    def _upload_input_image(self) -> Union[str, None]:
        """Uploads the input image to the image storage.

        Returns:
            Union[str, None]: The ID of the uploaded image on the image storage
                or None if the upload fails or the image is already uploaded
                to the image storage.
        """
        uploaded_file = st.session_state.uploaded_file
        if st.session_state.uploaded_file_id != uploaded_file.id:
            try:
                image_id = self.image_storage_cli.upload_bytes(
                    image_bytes=uploaded_file.read(),
                    name=uploaded_file.name,
                    file_type=uploaded_file.type,
                    source="toolbox.FrontEnd."+self.name.replace(" ", "_")
                )
                st.session_state.uploaded_file_id = uploaded_file.id
                return image_id
            except Exception as e:
                self.logger.exception(e, exc_info=True)
                st.session_state.error_message = f"Error: {e}"
        return None

    def _download_visualize_entities(self, entities: List[dict],
                                     visualization_params: dict = {}) -> Image:
        """Visualize a list of entities by its id. Call the image storage API
        to generate the image, then download it.

        Args:
            entities (List[dict]): List of entity dicts to visualize.
            visualization_params (dict, optional): Visualization parameters.
                Defaults to {}.

        Returns:
            Image: Image generated by the image storage API.
        """
        entity_ids = [e["id"] for e in entities]
        vis_id = self.image_storage_cli.visualize(
            entity_ids,
            visualization_params=visualization_params)
        return self.image_storage_cli.download(vis_id)

    def _init_session_state(self):
        """Initialize the session state variables.
        """
        st.session_state.setdefault("error_message", None)
        st.session_state.setdefault("input_image", None)
        st.session_state.setdefault("output_json", None)
        st.session_state.setdefault("output_image", None)
        st.session_state.setdefault("uploaded_file_id", None)
        st.session_state.setdefault("input_entity_id", None)

    def _ui(self):
        """Set the UI elements.
        """
        # Title
        title_info = st.empty()
        if self.description:
            description = self.description + \
                f" The docs of the API can be found here: " +\
                f'<a href="{self.docs_url}">{self.docs_url}</a>'
            utils.write_title_info_toggle(
                self.name,
                description,
                title_info
            )
        else:
            title_info.title(self.name)

        # Error message
        self._st_error = st.empty()

        # Input and output columns
        col_input, col_output = st.columns(2, gap="large")

        # Input column
        with col_input:
            st.subheader("Input")
            st.text_input(
                "Input ID",
                placeholder="e.g. urn:ngsi-ld:Image:IMG1",
                key="input_id",
                disabled=(
                    "uploaded_file" in st.session_state and
                    st.session_state.uploaded_file is not None
                )
            )
            st.write(
                "<p style='color: gray; text-align: center;'>- or -</p>",
                unsafe_allow_html=True
            )
            st.file_uploader(
                "Upload an image",
                type=self._upload_mimes,
                key="uploaded_file",
            )
            with st.expander("Advanced"):
                st.radio(
                    "Accept",
                    options=["application/json", "application/ld+json"],
                    key="accept_header",
                )
                st.markdown("Visualization parameters")
                st_vis_params = st.empty()
            st.session_state.visualization_parameters = \
                utils.add_visualization_params(st_vis_params)

            self._st_button_predict = st.empty()
            st.divider()
            self._st_input_image = st.empty()
            self._st_preview_image_id = st.empty()

        with col_output:
            st.subheader("Output")
            self._st_output_image = st.empty()
            st.divider()
            self._st_output_text = st.empty()
            self._st_output_json = st.empty()

    def _get_image_from_entity(self, entity_id: str) -> Union[str, None]:
        """Get the image ID from an entity. If the entity is an Image, return
        its ID. If the entity is not an Image, return the ID of the image field
        of the entity.

        Args:
            entity_id (str): An entity ID.

        Returns:
            Union[str, None]: The image ID or None if not found.
        """
        try:
            entity = self.context_cli.get_entity(entity_id, as_dict=True)
            if entity is None:
                raise ValueError(
                    f"Entity '{utils.format_id(entity_id)}' not found"
                )
            if entity["type"] == "Image":
                return entity_id
            if "image" in entity:
                if "object" in entity["image"]:
                    return entity["image"]["object"]
                if "value" in entity["image"]:
                    return entity["image"]["value"]
            raise AttributeError(
                f"Entity '{utils.format_id(entity_id)}' has no image field"
            )
        except Exception as e:
            self.logger.exception(e, exc_info=True)
            st.session_state.error_message = f"Error: {e}"
        return None

    def _update(self):
        """Handle the UI logic.
        """
        # Get the input entity ID from the text input or the uploaded file
        input_image_id = ""
        if st.session_state.uploaded_file is None:
            # Get the image from the id text input
            if st.session_state.input_id:
                st.session_state.input_entity_id = st.session_state.input_id
                input_image_id = self._get_image_from_entity(
                    st.session_state.input_entity_id
                )
        else:
            # Get the image from the uploaded file
            input_image_id = self._upload_input_image()
            st.session_state.input_entity_id = input_image_id

        # Download the input image from the image storage
        if input_image_id:
            st.session_state.input_image = self._get_image_from_id(
                input_image_id
            )

        # Clear image if there is no input
        if st.session_state.input_image is None:
            st.session_state.output_image = None
            st.session_state.output_json = None

        # Set the input_image an id caption widgets
        if st.session_state.input_image is not None:
            self._st_input_image.image(
                st.session_state.input_image.image,
                channels="BGR"
            )
            self._st_preview_image_id.caption(
                utils.format_id(st.session_state.input_image.id)
            )
        else:
            self._st_input_image.empty()
            self._st_preview_image_id.empty()

        # Set the predict button
        self._st_button_predict.button(
            "Predict",
            type="primary",
            use_container_width=True,
            on_click=self._on_predict,
            disabled=st.session_state.input_image is None
        )

        # Show the output image if any
        if st.session_state.output_image is not None:
            self._st_output_image.image(
                st.session_state.output_image.image,
                channels="BGR"
            )
        else:
            self._st_output_image.empty()

        # Show the output JSON if any
        if st.session_state.output_json is not None:
            if len(st.session_state.output_json) == 0:
                self._st_output_image.warning("No entities found")
            else:
                if self.context_broker_links:
                    ids = [e["id"] for e in st.session_state.output_json]
                    broker_url = utils.get_entities_broker_link(
                        self.context_cli.broker_url,
                        ids
                    )
                    link = f"[See the entities on the context broker]" \
                           f"({broker_url}) <br/><br/>"
                else:
                    link = ""
                self._st_output_text.markdown(
                    link + "API response:",
                    unsafe_allow_html=True
                )
                self._st_output_json.write(st.session_state.output_json)
        else:
            self._st_output_json.empty()

        # Show the error message if any
        if st.session_state.error_message is not None:
            self._st_error.error(st.session_state.error_message)
        else:
            self._st_error.empty()
        st.session_state.error_message = None

    def __call__(self):
        self._init_session_state()
        self._ui()
        self._update()
