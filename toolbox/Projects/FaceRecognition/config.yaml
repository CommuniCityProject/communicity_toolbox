face_recognition:
  model_name: face_recognition_facenet
  params:
    distance_threshold: 0.75
    model_path: ../../../data/models/face_recognition_facenet/squeezenet_VGGFace2/model-20180204-160909.ckpt-266000
    use_cuda: False
  dataset_path: ../../../data/samples/face_recognition_datasets/facenet_celeb_single.pkl
  unknown_label: "<unk>"
  domain: Celeb

face_detector:
  model_name: face_detector_retinaface
  params:
    weights_path: ../../../data/models/face_detector_retinaface/Resnet50_Final.pth
    model_name: resnet50
    confidence_threshold: 0.7
    landmarks: False
    nms_threshold: 0.4
    use_cuda: False

context_broker:
  host: 192.168.0.100
  port: 1026
  # URI where notifications will be sent
  notification_uri: http://192.168.0.100:9090/ngsi-ld/v1/notify
  # Check for conflicting subscriptions before creating a new one
  check_subscription_conflicts: True

api:
  host: 0.0.0.0
  port: 9090

  # Wether the api should extract features of faces
  load_dataset: True

  # Wether the api should extract features of faces
  do_feature_extraction: True

  # Whether the api should recognize the features
  do_feature_recognition: True

  # List of origins that should be permitted to make cross-origin requests.
  allowed_origins: []
  
  # If the images are stored locally and can be accessed by their path.
  local_image_storage: False

  # Create a new entity in the context broker with the recognized data when
  # an unrecognized entity is received and processed from the context broker.
  post_new_entity: False
  
  # Update the unrecognized received entity from the context broker with
  # the recognized data.
  update_entity: True

subscriptions:
  - entity_type: Face
    watched_attributes: ["recognized"]
    query: "recognized==false"
  - entity_type: Image
    watched_attributes: ["purpose"]
    query: "purpose==%22FaceRecognition%22"

visualization:
  image_height: 800